script(type="module")
    | 
    | const converter = new showdown.Converter()
    | const readmeElement = document.getElementById('readme')
    | const dynamicElement = document.getElementById('dynamic')
    | 
    | class MarkdownRouter {
    | 
    |     constructor(link, readmeSection = readmeElement, dynamicSection = dynamicElement){
    |         this.link = link
    |         this.readmeSection = readmeSection
    |         this.dynamicSection = dynamicSection
    |     }
    | 
    |     async getComponent(){
    |         if(this.link == '/'){
    |             this.constructor.showReadme()
    |             return true
    |         }
    |         if(this.link.startsWith('content/')){
    |             const responce = await fetch(this.link + `?${Math.random()}`)
    |             if(responce.status > 299) throw 'Не удалось обработать ссылку.'
    |             const text =  await responce.text()
    |             this.constructor.prepareDynamic(text)
    |             return true
    |         }
    |         return false
    |     }
    | 
    |     getLink(){
    |         return this.link
    |     }
    | 
    |     static hideBoth(){
    |         readmeElement.style.display = 'none'
    |         dynamicElement.style.display = 'none'
    |     }
    | 
    |     static showReadme(){
    |         MarkdownRouter.hideBoth()
    |         readmeElement.style.display = 'block'
    |     }
    | 
    |     static prepareDynamic(text){
    |         MarkdownRouter.hideBoth()
    |         dynamicElement.innerHTML = converter.makeHtml(text) || ''
    |         dynamicElement.style.display = 'block'
    |         return dynamicElement
    |     }
    | 
    |     static showError(err){
    |         console.log(err)
    |     }
    | }
    | 
    | 
    | 
    | const local = window.location.hostname == 'localhost'
    | const tocClose = document.querySelector('#toc-offcanvas .btn-close')
    | 
    | function closeOffcanvas(){
    |     if(tocClose) tocClose.click()
    | }
    | 
    | let lastURL = document.URL;
    | let Router = null
    | 
    | async function setRouter(_Router){
    |     Router = _Router || MarkdownRouter
    |     window.addEventListener("hashchange", async function(event){
    |         Object.defineProperty(event, "oldURL", {enumerable:true,configurable:true,value:lastURL})
    |         Object.defineProperty(event, "newURL", {enumerable:true,configurable:true,value:document.URL})
    |         lastURL = document.URL;
    |         await processHashLink()
    |     });
    |     await processHashLink()
    | }
    | 
    | async function processHashLink(){
    |     if(!window.location.hash) return
    |     let link = /.*#([a-zA-Z0-9\-\/\._]+)$/.exec(document.URL)
    |     link = link && link[1]
    |     try {
    |         if(!link) throw 'Роутер не работает с такими ссылками.'
    |         const router = new Router(link)
    |         const Component = await router.getComponent()
    |         if(Component && typeof Component === 'boolean') return
    |         if(!Component) throw 'Не удалось обработать ссылку'
    |         const target = Router.prepareDynamic()
    |         new Component({target, props: {link, local}})
    |     }
    |     catch(err){
    |         Router.showError(err)
    |     }
    |     finally {
    |         closeOffcanvas()
    |     }
    | }
    | 
    | 
    | 
    | setRouter(MarkdownRouter)

